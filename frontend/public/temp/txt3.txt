"use client";
import { useEffect, useState } from "react";
import { AddBox } from "@mui/icons-material";
import RequestModal from "../../components/RequestModal";
import ViewTransmittalMemo from "../request-view/ViewTransmittalMemo";
import { FormProps, TransmittalData } from "../../type/FormType";
import { useFetchUser } from "@/hooks/useAuth";
import { useFetchBranches } from "../../hooks/useRequest";



export default function TransmittalMemoPage({requestTypeId, requestType}: FormProps) {
  const [items, setItems] = useState<{ id: number; text: string }[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [formData, setFormData] = useState({to: "",from: 0,date: "",description:"",note:"",items:[]});
  const { data: user } = useFetchUser();
  const { data: branches, isLoading, isError } = useFetchBranches();
  const [counter, setCounter] = useState(1);

  useEffect(() => {
    if (user) {
      setFormData((prev) => ({ 
        ...prev, 
        from: user.branchId ?? 0   
      }));
    }
  }, [user]);



  


  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: name === "from" ? Number(value) : value 
    }));
  };

 
  
  const handleAddItem = () => {
    setItems([...items, { id: counter, text: "" }]);
    setCounter(counter + 1);
  };

  const handleRemoveItem = (id: number) => {
    setItems(items.filter((item) => item.id !== id));
  };

  const handleChangeItem = (id: number, value: string) => {
    setItems((prev) =>
      prev.map((item) => (item.id === id ? { ...item, text: value } : item))
    );
  };

  const handleOpenModal = async () => {
    setIsModalOpen(true); 
};


  return (
    <div className="bg-white border border-[#ECECEC] min-h-90 py-4 px-3 rounded-md">
      <div className="text-center">
        <h2 className="p-4 font-bold text-xl">TRANSMITTAL MEMO</h2>
      </div>

      <div>
        <form action="" className="grid grid-cols-[repeat(auto-fit,minmax(20rem,1fr))] gap-x-10 gap-y-4 px-4 mt-8">
          <div className="flex flex-col">
            <label htmlFor="to" className="mb-2 font-semibold">To</label>
            <input
              type="text"
              name="to"
              id="to"
              value={formData.to}
              onChange={handleInputChange}
              placeholder="Enter to..."
              className="border border-gray-300 rounded-lg bg-gray-50 p-2"
            />
          </div>

       

          
          <div className="flex flex-col">
          <label className="mr-2 mb-2 font-semibold">From:</label>
          <select
            name="from"
            value={formData.from}
            onChange={handleInputChange}
            className="border border-gray-300 bg-gray-50 p-2 rounded-lg">
            <option value={0}>-- Select Branch --</option>
            {branches?.map((branch) => (
              <option key={branch.id} value={branch.id}>
                {branch.branchName}
              </option>
            ))}
          </select>
        </div>



          <div className="flex flex-col">
            <label htmlFor="date" className="mb-2 font-semibold">Date</label>
            <input
              type="date"
              name="date"
              id="date"
              value={formData.date}
              onChange={handleInputChange}
              className="border border-gray-300 rounded-lg bg-gray-50 p-2"
            />
          </div>

          <div className="col-span-2 flex flex-col">
            <label htmlFor="description" className="mb-2 font-semibold">Description</label>
            <textarea
              name="description"
              id="description"
              value={formData.description}
              onChange={handleInputChange}
              className="border border-gray-300 rounded-lg bg-gray-50 p-2">
            </textarea>
          </div>

          <div className="flex flex-col">
            <label htmlFor="note" className="mb-2 font-semibold">Note</label>
            <textarea
              name="note"
              id="note"
              value={formData.note}
              onChange={handleInputChange}
              className="border border-gray-300 rounded-lg p-2 bg-gray-50">
              </textarea>
          </div>

         
          <div className="flex flex-start h-10 mt-2">
            <button
              type="button"
              onClick={handleAddItem}
              className="border border-gray-300 bg-gray-50 px-6 rounded-lg flex items-center">
              <span className="mr-2">ADD ITEM</span>
              <AddBox
                className="text-green-600 hover:text-green-800 shadow-xl"
                fontSize="large"
              />
            </button>
          </div>
        </form>

     
        <div className="mt-6 px-4 grid grid-cols-2">
          {items.map((item) => (
            <div key={item.id}
              className="flex items-center gap-2 rounded p-2">
              <input
                type="text"
                value={item.text}
                onChange={(e) => handleChangeItem(item.id, e.target.value)}
                placeholder="Enter item"
                className="flex-1 border border-gray-300 rounded-lg p-2 bg-gray-50"
              />
              <button
                type="button"
                onClick={() => handleRemoveItem(item.id)}
                className="text-red-600 hover:text-red-800 font-bold">
                Ã—
              </button>
            </div>
          ))}
        </div>


        <div>
            <button className="bg-green-800 hover:bg-green-700 text-white px-6 py-1 rounded ml-5 mt-4" onClick={handleOpenModal}>Submit</button>
        </div>

      </div>



            {isModalOpen && (
                <RequestModal title="Transmittal Memo Summary" size="xxl" onClose={() => setIsModalOpen(false)}>
                <ViewTransmittalMemo 
                  formData={{...formData,
                    fromName: branches?.find(b => b.id === formData.from)?.branchName ?? "",
                    requestedBy: user?.name ?? "",  
                    requestedPosition: user?.position ?? "",
                    branchName: branches?.find(b => b.id === formData.from)?.branchName ?? "",
                    address: branches?.find(b => b.id === formData.from)?.address ?? "",
                    }}
                  items={items} requestType={requestType}  onClose={() => setIsModalOpen(false)}/>
                </RequestModal>
            )}




    </div>
  );
}































import { FormPropsTransmittalProps, TransmittalData } from "../../type/FormType";
import { formatLongDate } from "@/app/utils/DateFormatter";
import { useFetchUser } from "@/hooks/useAuth";
import { useAddTransmittalMemo } from "../../hooks/userForm";
import SweetAlert from "../../components/Swal";

export default function ViewTransmittalMemo({ formData, items,requestType,onClose }: FormPropsTransmittalProps) {
     const { data: user , isLoading: userLoading } = useFetchUser();
     const addMutation = useAddTransmittalMemo();

     const handleSave = () => {
      const payload: TransmittalData = {
        ...formData,
        items,
        requestTypeId: requestType?.id ?? 0,
        requestFromId: user?.branchId ?? 0,
      };
  
      addMutation.mutate(payload, {
        onSuccess: (res) => {
          SweetAlert.successAlert("Saved", "Form saved successfully");
          onClose?.(); 
        },
        onError: (err) => {
          console.error("Save failed:", err);
        },
      });
    };
    if (!formData) return null; 

    return (
      <div className="max-h-[70vh] overflow-y-auto px-20 py-8">
        {/* HEADER */}
        <div className="text-center">
          <h2 className="text-xl font-extrabold">EMB CAPITAL LENDING CORPORATION</h2>
          <h2 className="text-lg font-bold">{formData.branchName} BRANCH</h2>
          <h2 className="text-lg font-bold">{formData.address}</h2>
        </div>
  
        <div className="text-center mt-10 ">
          <h3 className="font-bold text-lg">TRANSMITTAL MEMO</h3>
        </div>
  
        <div className="w-5/12 mt-8 space-y-2 ml-22 ">
          <div>
            <span className="font-bold mr-13">TO: </span>
            <span className="font-semibold">{formData.to}</span>
          </div>
          <div>
            <span className="font-bold mr-8">FROM:</span>
            <span className="font-semibold">{formData.branchName}</span>
          </div>
          <div>
            <span className="font-bold mr-9.5">DATE:</span>
            <span className="font-semibold">{formatLongDate(formData.date)}</span>
          </div>
        </div>
  
        <div className="mt-8 ml-25 text-md w-9/12">
          <h2 className="indent-12">{formData.description}</h2>
        </div>
  
        <div className="mt-8 py-2 px-20 ml-5">
          <ul className="font-semibold">
            {(items ?? []).length > 0 ? (
              (items ?? []).map((item) => (
                <li key={item.id} className="border-b-2 px-4">
                  {item.text}
                </li>
              ))
            ) : (
              <li className="px-4 italic text-gray-500">No items added</li>
            )}
          </ul>
        </div>

  
        {formData.note && (
          <div className="px-25 mt-8">
            <h2>{formData.note}</h2>
          </div>
        )}


        <div className="px-20 mt-15 grid grid-cols-2">
            <div>
                <h2 className="font-extrabold mb-2">PREPARED BY:</h2>
                <p className="font-bold">{user?.name}</p>
                <p className="font-bold">{user?.position}-{user?.branchName}</p>

                <h2 className="font-extrabold mb-2 mt-4">CHECKED BY:</h2>
                <p className="font-bold">{requestType?.checkedBy?.name}</p>
                <p className="font-bold">{requestType?.checkedBy?.position}</p>

                <h2 className="font-extrabold mb-2 mt-4">RECOMMENDING APPROVAL:</h2>
                <p className="font-bold">{requestType?.recomApproval?.name}</p>
                <p className="font-bold">{requestType?.recomApproval?.position}</p>

                <h2 className="font-extrabold mb-2 mt-4">APPROVED BY:</h2>
                <p className="font-bold">{requestType?.approveBy?.name}</p>
                <p className="font-bold">{requestType?.approveBy?.position}</p>

            </div>

            <div className="self-center mb-26">
            <h2 className="font-extrabold mb-2 mt-4">CHECKED BY:</h2>
              <p className="font-bold">ROLEANNE JEAN GEROGALIN</p>
              <p className="font-bold">ACCTG COOR</p>
            </div>
        </div>


        <div className="flex justify-end mt-4">
          <button
            type="button"
            disabled={addMutation.isPending}
            className="px-6 py-2 rounded bg-green-700 text-white hover:bg-green-800"
            onClick={handleSave}>
            {addMutation.isPending ? "Saving..." : "Save"}
          </button>
        </div>


      </div>
    );
  }
  



















  export function ViewApprovalTransmittalMemo({mainRequest, formData, onClose}: FormPropsTransmittalProps) {


      return (
        <div className="max-h-[70vh] overflow-y-auto px-10 py-8">
          {/* HEADER */}
          <div className="text-center">
            <h2 className="text-xl font-extrabold">EMB CAPITAL LENDING CORPORATION</h2>
            <h2 className="text-lg font-bold"> {mainRequest?.requestFrom.branchName} BRANCH</h2>
            <h2 className="text-lg font-bold">{mainRequest?.requestFrom.address}</h2>
          </div>
    
          <div className="text-center mt-10">
            <h3 className="font-bold text-lg">TRANSMITTAL MEMO</h3>
          </div>
    
          <div className="w-5/12 mt-8 space-y-2 ml-22 ">
            <div>
              <span className="font-bold mr-13">TO: </span>
              <span className="font-semibold">{mainRequest?.transmittalMemo?.to}</span>
            </div>
            <div>
              <span className="font-bold mr-8">FROM:</span>
              <span className="font-semibold"> {mainRequest?.transmittalMemo?.from}</span>
            </div>
            <div>
              <span className="font-bold mr-9.5">DATE:</span>
              <span className="font-semibold">{formatLongDate(mainRequest?.transmittalMemo?.date)}</span>
            </div>
          </div>
    
          <div className="mt-8 ml-25 text-md w-9/12">
            <h2 className="indent-12">{mainRequest?.transmittalMemo?.description}</h2>
          </div>
    
          <div className="mt-8 py-2 px-20 ml-5">
            <ul className="font-semibold">
            {mainRequest?.transmittalMemo?.items?.length ? (
              mainRequest.transmittalMemo.items.map((item: any) => (
                <li key={item.id} className="border-b-2 px-4">
                  {item.text}
                </li>
              ))
            ) : (
              <li className="px-4 italic text-gray-500">No items added</li>
            )}

            </ul>
          </div>
    
          {mainRequest?.transmittalMemo?.note && (
            <div className="px-25 mt-8">
              <h2>{mainRequest?.transmittalMemo?.note}</h2>
            </div>
          )}


          <div className="px-20 mt-15 grid grid-cols-2">
              <div>
                  <h2 className="font-extrabold mb-2">PREPARED BY:</h2>
                  <p className="font-bold">{mainRequest?.requestBy.name.toLocaleUpperCase()}</p>
                  <p className="font-bold">{mainRequest?.requestBy.position}-</p>

                  <h2 className="font-extrabold mb-2 mt-4">CHECKED BY:</h2>
                  <p className="font-bold">{mainRequest?.requestType.checkedBy?.name.toLocaleUpperCase()}</p>
                  <p className="font-bold">{mainRequest?.requestType.checkedBy?.position.toLocaleUpperCase()}</p>

                  <h2 className="font-extrabold mb-2 mt-4">RECOMMENDING APPROVAL:</h2>
                  <p className="font-bold">{mainRequest?.requestType.recomApproval?.name.toLocaleUpperCase()}</p>
                  <p className="font-bold">{mainRequest?.requestType.recomApproval?.position.toLocaleUpperCase()}</p>

                  <h2 className="font-extrabold mb-2 mt-4">APPROVED BY:</h2>
                  <p className="font-bold">{mainRequest?.requestType.approveBy?.name.toLocaleUpperCase()}</p>
                  <p className="font-bold">{mainRequest?.requestType.approveBy?.position.toLocaleUpperCase()}</p>

              </div>

              <div className="self-center mb-26">
              <h2 className="font-extrabold mb-2 mt-4">CHECKED BY:</h2>
                <p className="font-bold">ROLEANNE JEAN GEROGALIN</p>
                <p className="font-bold">ACCTG COOR</p>
              </div>
          </div>


         


        </div>
      );
    }
    




    export interface FormPropsTransmittalProps{
    formData?: TransmittalData;
    items?: TransmittalItem[];
    requestType?: RequestTypeDTO | null;
    mainRequest?: MainRequest | null;
    onClose?: () => void;
    onReset?: () => void;
}


export interface TransmittalData{
    to?:string;
    from?:number;
    fromName?: string;  
    date?:string;
    description?:string;
    note?:string;
    items?:TransmittalItem[];
    requestToId?:number;
    requestedBy?:string;
    requestedPosition?: string;
    branchName?: string;
    address?:string;
    requestTypeId?:number;
    requestFromId?:number;
}   
