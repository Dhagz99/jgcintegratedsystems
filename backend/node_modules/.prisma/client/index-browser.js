
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.12.0
 * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
 */
Prisma.prismaVersion = {
  client: "6.12.0",
  engine: "8047c96bbd92db98a2abc7c9323ce77c02c89dbc"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  username: 'username',
  password: 'password',
  role: 'role',
  branchId: 'branchId',
  signatureUrl: 'signatureUrl',
  position: 'position',
  initial: 'initial',
  approver: 'approver',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  branchCode: 'branchCode',
  branchName: 'branchName',
  bom: 'bom',
  faa: 'faa',
  telephone: 'telephone',
  address: 'address',
  companyName: 'companyName',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.RequestTypeScalarFieldEnum = {
  id: 'id',
  requestName: 'requestName',
  notedById: 'notedById',
  checkedById: 'checkedById',
  checkedBy2Id: 'checkedBy2Id',
  recomApprovalId: 'recomApprovalId',
  recomApproval2Id: 'recomApproval2Id',
  approveById: 'approveById',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.MainRequestScalarFieldEnum = {
  id: 'id',
  referenceCode: 'referenceCode',
  requestTypeId: 'requestTypeId',
  requestById: 'requestById',
  requestFromId: 'requestFromId',
  status: 'status',
  requestDate: 'requestDate',
  remarks: 'remarks',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.FormFundTransferScalarFieldEnum = {
  id: 'id',
  mainRequestID: 'mainRequestID',
  requestToId: 'requestToId',
  requestContent: 'requestContent',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.ApprovalTableScalarFieldEnum = {
  id: 'id',
  mainFormId: 'mainFormId',
  notedBy: 'notedBy',
  checkedBy: 'checkedBy',
  checkedBy2: 'checkedBy2',
  recomApproval: 'recomApproval',
  recomApproval2: 'recomApproval2',
  approveBy: 'approveBy',
  createdAt: 'createdAt',
  updateAt: 'updateAt'
};

exports.Prisma.RequestLogsScalarFieldEnum = {
  id: 'id',
  approvalId: 'approvalId',
  checkerType: 'checkerType',
  approverId: 'approverId',
  action: 'action',
  createdAt: 'createdAt'
};

<<<<<<< HEAD
=======
exports.Prisma.FormTravelOrderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  position: 'position',
  departure_date: 'departure_date',
  current_date: 'current_date',
  destination: 'destination',
  purpose_of_travel: 'purpose_of_travel',
  items: 'items',
  total_amount: 'total_amount',
  createdAt: 'createdAt',
  mainFormId: 'mainFormId'
};

exports.Prisma.FormProposedBudgetScalarFieldEnum = {
  id: 'id',
  description: 'description',
  budget: 'budget',
  total_expenses: 'total_expenses',
  variance: 'variance',
  proposed_budget: 'proposed_budget',
  remarks: 'remarks',
  expense_type: 'expense_type',
  month_of: 'month_of',
  createdAt: 'createdAt',
  mainFormId: 'mainFormId'
};

exports.Prisma.FormTransmittalMemoScalarFieldEnum = {
  id: 'id',
  from: 'from',
  date: 'date',
  description: 'description',
  note: 'note',
  items: 'items',
  to_id: 'to_id',
  mainFormId: 'mainFormId'
};

exports.Prisma.FormDisburseScalarFieldEnum = {
  id: 'id',
  from: 'from',
  date: 'date',
  subject: 'subject',
  description: 'description',
  note: 'note',
  total_amount: 'total_amount',
  items: 'items',
  to_id: 'to_id',
  mainFormId: 'mainFormId'
};

>>>>>>> tester
exports.Prisma.CountSheetScalarFieldEnum = {
  id: 'id',
  fundType: 'fundType',
  mainFormId: 'mainFormId',
  office: 'office',
  dateCount: 'dateCount',
  fundName: 'fundName',
  fundAmount: 'fundAmount',
  reference: 'reference',
  cashDemo: 'cashDemo',
  repFund: 'repFund',
  totalFund: 'totalFund',
  cashShort: 'cashShort'
};

exports.Prisma.CashFundScalarFieldEnum = {
  id: 'id',
  countId: 'countId',
  startDate: 'startDate',
  endDate: 'endDate',
  reqDate: 'reqDate',
  payee: 'payee',
  remarks: 'remarks',
  fundAmount: 'fundAmount',
  miscExp: 'miscExp',
  billFee: 'billFee',
  telFee: 'telFee',
  dueMh: 'dueMh'
};

exports.Prisma.TravelFundScalarFieldEnum = {
  id: 'id',
  countId: 'countId',
  tagsField: 'tagsField',
  startDate: 'startDate',
  endDate: 'endDate',
  reqDate: 'reqDate',
  travelling: 'travelling',
  fuel: 'fuel',
  repair: 'repair',
  litigation: 'litigation',
  totalFee: 'totalFee',
  kilometer: 'kilometer',
  remarks: 'remarks'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  Admin: 'Admin',
  User: 'User',
  Branch: 'Branch',
  Coordinator: 'Coordinator',
  Superadmin: 'Superadmin'
};

exports.Statuses = exports.$Enums.Statuses = {
  PENDING: 'PENDING',
  INPROGRESS: 'INPROGRESS',
  CANCEL: 'CANCEL',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EMPTY: 'EMPTY'
};

exports.Prisma.ModelName = {
  User: 'User',
  Branch: 'Branch',
  RequestType: 'RequestType',
  MainRequest: 'MainRequest',
  FormFundTransfer: 'FormFundTransfer',
  ApprovalTable: 'ApprovalTable',
  RequestLogs: 'RequestLogs',
<<<<<<< HEAD
=======
  formTravelOrder: 'formTravelOrder',
  formProposedBudget: 'formProposedBudget',
  formTransmittalMemo: 'formTransmittalMemo',
  formDisburse: 'formDisburse',
>>>>>>> tester
  CountSheet: 'CountSheet',
  CashFund: 'CashFund',
  TravelFund: 'TravelFund'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
